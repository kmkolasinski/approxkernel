!  SUBROUTINE resizebilinear(input, output)
!    REAL(4), DIMENSION(:, :), INTENT(IN) :: input
!    REAL(4), DIMENSION(:, :) :: output
  INTEGER, DIMENSION(2) :: input_shape, target_shape
  INTEGER :: i, j, ix, iy
  REAL(8) :: x, y, alpha, dx, dy
  INTEGER :: target_width, target_height
  INTEGER :: source_width, source_height
  INTEGER, DIMENSION(:), ALLOCATABLE :: mapix, mapiy
  REAL(8), DIMENSION(:), ALLOCATABLE :: mapx, mapy

  target_shape = SHAPE(output)
  input_shape = SHAPE(input)
  CALL check_inputs(input_shape, input_shape, .true.)

  target_width = target_shape(1)
  target_height = target_shape(2)

  source_width = input_shape(1)
  source_height = input_shape(2)

  ALLOCATE(mapix(target_width), mapiy(target_height))
  ALLOCATE(mapx(target_width), mapy(target_height))

  DO i = 1, target_width
    alpha =  (source_width - 1)/ (target_width - 1.0)
    x = (i - 1) * alpha + 1
    mapx(i) = x
    mapix(i) = MIN(MAX(INT(x - 1e-6), 1), source_width - 1)
  END DO
  DO j = 1, target_height
    alpha =  (source_height - 1)/ (target_height - 1.0)
    y = (j - 1) * alpha + 1
    mapy(j) = y
    mapiy(j) = MIN(MAX(INT(y - 1e-6), 1), source_height - 1)
  END DO

  output = 0

  DO i = 1 , target_width
    DO j = 1, target_height
      x = mapx(i)
      y = mapy(j)
      ix = mapix(i)
      iy = mapiy(j)
      dx = x - ix
      dy = y - iy

      output(i, j) = &
        input(ix  , iy  ) * (1 - dx) * (1 - dy) &
        + input(ix+1, iy  ) * (dx)     * (1 - dy) &
        + input(ix  , iy+1) * (1 - dx) * (dy) &
        + input(ix+1, iy+1) * (dx)     * (dy)

    END DO
  END DO

  DEALLOCATE(mapx, mapy)
  DEALLOCATE(mapix, mapiy)
