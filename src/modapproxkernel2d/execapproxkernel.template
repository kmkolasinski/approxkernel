!  SUBROUTINE execapproxskernel(kernel_obj, input, output)
!    TYPE(ApproxSKernelData) :: kernel_obj
!    REAL(KIND=4), DIMENSION(:, :) :: input, output

  INTEGER :: s, width, height

  width = kernel_obj%input_shape(1)
  height = kernel_obj%input_shape(2)

  kernel_obj%inputs(1)%array = input

  DO s = 1, kernel_obj%num_scales

    ! same as: h = conv2d(x, kernel)
    CALL execvslconv2d( &
        kernel_obj%kernels_convs(s), &
        kernel_obj%inputs(s)%array, &
        kernel_obj%outputs(s)%array &
      )

    IF (s == 1) THEN
      output = kernel_obj%outputs(s)%array
    ELSE
      ! same as: h' = resize(h, shape(input))
      CALL resizebilinear2d(&
          kernel_obj%outputs(s)%array, &
          kernel_obj%inputs(1)%array &
        )
      ! output +=  h'
      output = output + kernel_obj%inputs(1)%array
    ENDIF

    ! apply avg to all maps except the last one
    IF (s /= kernel_obj%num_scales) THEN

      IF (kernel_obj%use_smoothing) THEN
        ! optionally smoothen density
        CALL execvslconv2d(&
            kernel_obj%smoothing_convs(s), &
            kernel_obj%inputs(s)%array, &
            kernel_obj%outputs(s)%array &
          )
        kernel_obj%inputs(s)%array = kernel_obj%outputs(s)%array
      END IF
      ! downsample input by 2 factor
      CALL averagepool2x2( &
          kernel_obj%inputs(s)%array, &
          kernel_obj%inputs(s+1)%array, &
          dynamic=.false. &
        )

    END IF

  END DO
!  END SUBROUTINE

