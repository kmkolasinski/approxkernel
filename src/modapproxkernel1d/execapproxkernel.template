!  SUBROUTINE execapproxskernel1d(kernel_obj, input, output)
!    TYPE(ApproxSKernel1D) :: kernel_obj
!    REAL(KIND=4), DIMENSION(:, :) :: input, output
  DTYPE, DIMENSION(:), ALLOCATABLE :: tmp_input, tmp_output
  INTEGER :: s, width

  width = kernel_obj%input_shape(1)

  ALLOCATE(tmp_input(width))
  ALLOCATE(tmp_output(width))

  output = 0
  tmp_input = input

  DO s = 1, kernel_obj%num_scales
    ! same as: h = conv2d(x, kernel)
    CALL execvslconv1d(kernel_obj%kernels_convs(s), &
      tmp_input, kernel_obj%outputs(s)%array)

    IF (ANY(SHAPE(kernel_obj%outputs(s)%array) /= SHAPE(tmp_input))) THEN
      PRINT("(A, 2i5, A, 2i5, A, 2i5)"), &
          " [ERROR] Shape missmatch: scale=", s, &
          "output shape=", SHAPE(kernel_obj%outputs(s)%array), &
          "input shape=", SHAPE(tmp_input)
      STOP -1
    END IF
    ! same as: h' = resize(h, shape(input))
    CALL resizebilinear1d(kernel_obj%outputs(s)%array, tmp_output)
    ! output +=  h'
    output = output + tmp_output

    IF (kernel_obj%use_smoothing) THEN
      ! smoothen density
      CALL execvslconv1d(kernel_obj%smoothing_convs(s), &
                        tmp_input, kernel_obj%outputs(s)%array)
      tmp_input = kernel_obj%outputs(s)%array
    END IF
    ! downsample input by 2 factor
    CALL averagepool2inplace(tmp_input)

  END DO
  DEALLOCATE(tmp_input, tmp_output)
!  END SUBROUTINE

